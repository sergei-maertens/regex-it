name: Run CI

# Run this workflow every time a new commit pushed to your repository
on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

env:
  IMAGE_NAME: regexit/website
  DJANGO_SETTINGS_MODULE: regex.conf.ci
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  setup:
    name: Set up the build variables
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.vars.outputs.tag }}
      git_hash: ${{ steps.vars.outputs.git_hash }}

    steps:
      - name: Extract version information
        id: vars
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name (if present at all)
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          # PRs result in version 'merge' -> transform that into 'latest'
          [ "$VERSION" == "merge" ] && VERSION=latest

          echo "tag=${VERSION}" >> $GITHUB_OUTPUT
          echo "git_hash=${GITHUB_SHA}" >> $GITHUB_OUTPUT

  tests:
    name: Run the Django test suite
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        # Needed because the postgres container does not provide a healthcheck
        options:
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:6
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Bring up external services
        run: |
          docker compose -f docker-compose.mariadb.yml up -d
          until mysql -h 127.0.0.1 -P 3308 -u root -psupersecret  -e ";" ; do
            sleep 2
          done
          echo "mariadb replica up"

      - name: Install OS dependencies
        run: |
          sudo apt-get update
          sudo apt-get install gettext

      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Install dependencies
        run: |
          pip install -r requirements/ci.txt codecov

      - name: Build frontend
        run: |
          npm ci
          npm run build

      - name: Run tests
        run: |
          python src/manage.py compilemessages
          python src/manage.py collectstatic --noinput --link
          coverage run src/manage.py test src
        env:
          SECRET_KEY: dummy
          DB_USER: postgres
          DB_PASSWORD: ''
          MYSQL_REPLICA_DB_USER: root
          MYSQL_REPLICA_DB_PASSWORD: supersecret
          MYSQL_REPLICA_DB_HOST: 127.0.0.1
          MYSQL_REPLICA_DB_PORT: '3308'

      - name: Publish coverage report
        uses: codecov/codecov-action@v1

  docker_build:
    name: Build Docker image
    runs-on: ubuntu-latest

    needs:
      - setup

    steps:
      - uses: actions/checkout@v4
      - name: Build the production Docker image
        run: |
          docker build . \
            --tag $IMAGE_NAME:${{ needs.setup.outputs.tag }} \
            --build-arg COMMIT_HASH=${{ needs.setup.outputs.git_hash }} \
            --build-arg RELEASE=${{ needs.setup.outputs.tag }} \
