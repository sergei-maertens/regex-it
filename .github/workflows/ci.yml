name: Run CI

# Run this workflow every time a new commit pushed to your repository
on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

env:
  IMAGE_NAME: regexit/website
  DJANGO_SETTINGS_MODULE: regex.conf.ci
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  tests:
    name: Run the Django test suite
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:10
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        # Needed because the postgres container does not provide a healthcheck
        options:
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:6
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Bring up external services
        run: |
          docker-compose -f docker-compose.mariadb.yml up -d
          until mysql -h 127.0.0.1 -P 3308 -u root -psupersecret  -e ";" ; do
            sleep 2
          done
          echo "mariadb replica up"

      - name: Install OS dependencies
        run: |
          sudo apt-get update
          sudo apt-get install gettext

      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'

      - name: Install dependencies
        run: |
          pip install -r requirements/ci.txt codecov

      - name: Build frontend
        run: |
          npm ci
          npm run build

      - name: Run tests
        run: |
          python src/manage.py compilemessages
          python src/manage.py collectstatic --noinput --link
          coverage run src/manage.py test src
        env:
          SECRET_KEY: dummy
          DB_USER: postgres
          DB_PASSWORD: ''
          MYSQL_REPLICA_DB_USER: root
          MYSQL_REPLICA_DB_PASSWORD: supersecret
          MYSQL_REPLICA_DB_HOST: 127.0.0.1
          MYSQL_REPLICA_DB_PORT: '3308'

      - name: Publish coverage report
        uses: codecov/codecov-action@v1

  docker_build:
    name: Build Docker image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set tag
        id: vars
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name (if present at all)
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          # PRs result in version 'merge' -> transform that into 'latest'
          [ "$VERSION" == "merge" ] && VERSION=latest

          echo ::set-output name=tag::${VERSION}
          echo ::set-output name=git_hash::${GITHUB_SHA}

      - name: Build the production Docker image
        run: |
          docker build . \
            --tag $IMAGE_NAME:$RELEASE_VERSION \
            --build-arg COMMIT_HASH=${{ steps.vars.outputs.git_hash }} \
            --build-arg RELEASE=${{ steps.vars.outputs.tag }} \
        env:
          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}

      - run: docker image save -o image.tar $IMAGE_NAME:${{ steps.vars.outputs.tag }}
      - name: Store image artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-image
          path: image.tar
          retention-days: 1

  # docker_push:
  #   needs:
  #     - tests
  #     - docker_build

  #   name: Push Docker image
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' # Exclude PRs

  #   steps:
  #     # This will include the updated OAS (if updated) from the update-oas job.
  #     - uses: actions/checkout@v3

  #     - name: Download built image
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: docker-image

  #     - name: Set tag
  #       id: vars
  #       run: |
  #         # Strip git ref prefix from version
  #         VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

  #         # Strip "v" prefix from tag name (if present at all)
  #         [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

  #         # Use Docker `latest` tag convention
  #         [ "$VERSION" == "master" ] && VERSION=latest

  #         echo ::set-output name=tag::${VERSION}

  #     - name: Load image
  #       run: |
  #         docker image load -i image.tar

  #     - name: Log into registry
  #       run:
  #         echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }}
  #         --password-stdin

  #     - name: Push the Docker image (production)
  #       env:
  #         RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
  #       run: docker push $IMAGE_NAME:$RELEASE_VERSION
